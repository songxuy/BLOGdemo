<?php

namespace common\models;

use Yii;
use yii\base\Model;
use yii\data\ActiveDataProvider;
use common\models\Artical;

/**
 * Articalsearch represents the model behind the search form about `common\models\Artical`.
 */
class Articalsearch extends Artical
{
    /**
     * @inheritdoc
     */
    public function attributes()
    {
        return array_merge(parent::attributes(),['autherName']); // TODO: Change the autogenerated stub
    }

    public function rules()
    {
        return [
            [['id', 'status', 'create_time', 'update_time', 'user_id'], 'integer'],
            [['title', 'content', 'tags','autherName'], 'safe'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function scenarios()
    {
        // bypass scenarios() implementation in the parent class
        return Model::scenarios();
    }

    /**
     * Creates data provider instance with search query applied
     *
     * @param array $params
     *
     * @return ActiveDataProvider
     */
    public function search($params)
    {
        $query = Artical::find();

        // add conditions that should always apply here

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'pagination'=>['pageSize'=>6],
            'sort'=>[
                'defaultOrder'=>[
                    'id'=>'SORT_DESC',
                ],
               // 'attributes'=>['id','title','autherName'],
            ],
        ]);

        $this->load($params);

        if (!$this->validate()) {
            // uncomment the following line if you do not want to return any records when validation fails
            // $query->where('0=1');
            return $dataProvider;
        }

        // grid filtering conditions
        $query->andFilterWhere([
            'artical.id' => $this->id,
            'artical.status' => $this->status,
            'create_time' => $this->create_time,
            'update_time' => $this->update_time,
            'user_id' => $this->user_id,
        ]);

        $query->andFilterWhere(['like', 'title', $this->title])
            ->andFilterWhere(['like', 'content', $this->content])
            ->andFilterWhere(['like', 'tags', $this->tags]);

            $query->join('INNER JOIN', 'User', 'Artical.user_id =User.id');
            $query->andFilterWhere(['like', 'User.username', $this->autherName]);
            $dataProvider->sort->attributes['autherName'] = [
                'asc' => ['User.username' => SORT_ASC],
                'desc' => ['User.username' => SORT_DESC],
            ];


        return $dataProvider;
    }
}
