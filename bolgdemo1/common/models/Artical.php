<?php

namespace common\models;

use Yii;
use yii\bootstrap\Html;

/**
 * This is the model class for table "artical".
 *
 * @property integer $id
 * @property string $title
 * @property string $content
 * @property string $tags
 * @property integer $status
 * @property integer $create_time
 * @property integer $update_time
 * @property integer $user_id
 */
class Artical extends \yii\db\ActiveRecord
{
    private $_oldtags;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'artical';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['status','user_id','content','title'], 'required'],
            [['id', 'status', 'create_time', 'update_time', 'user_id'], 'integer'],
            [['content', 'tags'], 'string'],
            [['title'], 'string', 'max' => 128],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'title' => '标题',
            'content' => '内容',
            'tags' => '标签',
            'status' => '状态',
            'create_time' => '创建时间',
            'update_time' => '更新时间',
            'user_id' => '作者',
        ];
    }
    public function getStatu()
    {
        return $this->hasOne(Articalstatus::className(),['id'=>'status']);
    }

    public function getComments()
    {
        return $this->hasMany(Comments::className(),['artical_id'=>'id']);
    }
    public function getActiveComments()
    {
        return $this->hasMany(Comments::className(),['artical_id'=>'id'])->where('status=:status',[':status'=>1])->orderBy('id DESC');
    }
    public function getUsers()
    {
        return $this->hasOne(User::className(),['id'=>'user_id']);
    }
    public function beforeSave($insert)
    {
        if(parent::beforeSave($insert)){
            if($insert){
                $this->create_time=time();
                $this->update_time = time();
            }
            else{
                $this->update_time = time();
            }
            return true;
        }else{
            return false;
        }
    }
    public function  afterFind()
    {
        parent::afterFind(); // TODO: Change the autogenerated stub
        $this->_oldtags = $this->tags;
    }
    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        Tag::updateFrequncy($this->_oldtags,$this->tags);
    }
    public function afterDelete()
    {
        parent::afterDelete(); // TODO: Change the autogenerated stub
        Tag::updateFrequncy($this->tags,'');
    }

    public function getUrl(){
        return Yii::$app->UrlManager->createUrl([
            'artical/detail','id'=>$this->id,'title'=>$this->title
        ]);
    }

    public function getBeginging($length=288){
        $str = strip_tags($this->content);
        $strlen = mb_strlen($str);
        $str = mb_substr($str,0,$length,'utf-8');
        return $str.($strlen>$length?'...':'');
    }
    public function getTagLinks(){
        $links = array();
        foreach (Tag::string2array($this->tags) as $tag){
            $link[] = Html::a(Html::encode($tag),array('artical/index','Articalsearch[tags]'=>$tag));
        }
        return $link;
    }
    public function getCommentCount(){
        return Comments::find()->where(['artical_id'=>$this->id,'status'=>1])->count();
    }
}
